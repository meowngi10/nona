1.
#include <stdio.h>

int main() {
    int size, i, searchElement, *ptr;
  
    printf("Enter size of array: ");
    scanf("%d", &size);
  
    int arr[size];
  
    printf("Enter elements in array: ");
    for (i = 0; i < size; i++) {
        scanf("%d", &arr[i]);
    }
  
    printf("Enter element to search: ");
    scanf("%d", &searchElement);
  
    // Search for the element using pointers
    ptr = arr;
    for (i = 0; i < size; i++) {
        if (*ptr == searchElement) {
            printf("%d is found at %d position.\n", searchElement, i + 1);
            break;
        }
        ptr++;
    }
  
    if (i == size) {
        printf("%d is not found in the array.\n", searchElement);
    }
  
    return 0;
}

2.
#include <stdio.h>
#include <stdlib.h>
#include <string.h>



int main() {
    char strings[100][100];
    int count = 0;
    int shortestLength = 100;\
    int i;
  
    printf("Enter strings (enter 0 to stop):\n");
  
    while (1) {
        fgets(strings[count], 100, stdin);
        strings[count][strlen(strings[count]) - 1] = '\0'; 
        
        if (strcmp(strings[count], "0") == 0) {
            break;
        }
        
        if (strlen(strings[count]) < shortestLength) {
            shortestLength = strlen(strings[count]);
        }
        
        count++;
    }
  
    if (count == 0) {
        printf("No strings entered.\n");
        return 0;
    }
  
    FILE* file = fopen("strings.txt", "w");
    if (file == NULL) {
        printf("Error creating file.\n");
        return 0;
    }
  
    fprintf(file, "Entered Strings:\n");
    for (i = 0; i < count; i++) {
        fprintf(file, "%s\n", strings[i]);
    }
  
    fprintf(file, "\nShortest String(s):\n");
  
    for (i = 0; i < count; i++) {
        if (strlen(strings[i]) == shortestLength) {
            fprintf(file, "String %d - length(string)=%d\n", i + 1, shortestLength);
        }
    }
  
    fclose(file);
  

    return 0;
}


3.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>


void decodeString(char* string) {
	int i;
	int j;
    char decodingTable[11][3] = {
        {'a', '#'},
        {'e', '@'},
        {'o', '!'},
        {'u', '$'},
        {'I', '%'},
        {'c', '('},
        {'k', ')'},
        {'b', '*'},
        {'d', '&'},
        {'t', '^'}
    };

    for (i = 0; i < strlen(string); i++) {
        for (j = 0; j < 11; j++) {
            if (string[i] == decodingTable[j][1]) {
                string[i] = decodingTable[j][0];
                break;
            }
        }
    }
}

void getCurrentDateTime(char* datetime) {
    time_t currentTime;
    struct tm* localTime;

    currentTime = time(NULL);
    localTime = localtime(&currentTime);

    strftime(datetime, 100, "%Y-%m-%d %H:%M:%S", localTime);
}

int main() {
    FILE* inputFile = fopen("text_shifr.txt", "r");
    if (inputFile == NULL) {
        printf("Error opening input file.\n");
        return 1;
    }

    FILE* outputFile = fopen("decoded_text.txt", "w");
    if (outputFile == NULL) {
        printf("Error creating output file.\n");
        fclose(inputFile);
        return 1;
    }

    char encodedString[100];
    fgets(encodedString, 100, inputFile);
    fclose(inputFile);

    decodeString(encodedString);

    char dateTime[100];
    getCurrentDateTime(dateTime);

    fprintf(outputFile, "Decoded String: %s\n", encodedString);
    fprintf(outputFile, "Date and Time: %s\n", dateTime);

    fclose(outputFile);

    printf("Decoding and writing to file completed.\n");

    return 0;
}


